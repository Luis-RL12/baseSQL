
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 18 23:12:01 CST 2020
//----------------------------------------------------

package practica1compi1;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.JTree;
import javax.swing.JOptionPane;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 18 23:12:01 CST 2020
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\004\004\000\002\004\003\000\002\004\004" +
    "\000\002\004\003\000\002\004\004\000\002\004\003\000" +
    "\002\004\004\000\002\004\003\000\002\005\015\000\002" +
    "\005\015\000\002\010\006\000\002\010\010\000\002\007" +
    "\012\000\002\007\010\000\002\006\012\000\002\006\015" +
    "\000\002\011\005\000\002\011\005\000\002\012\005\000" +
    "\002\012\003\000\002\012\007\000\002\012\005\000\002" +
    "\013\003\000\002\013\005\000\002\015\005\000\002\015" +
    "\007\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\007\000\002\015\011\000" +
    "\002\015\007\000\002\015\007\000\002\015\007\000\002" +
    "\015\007\000\002\015\007\000\002\014\005\000\002\014" +
    "\007\000\002\014\007\000\002\014\011\000\002\002\016" +
    "\000\002\002\017\000\002\002\003\000\002\016\004\000" +
    "\002\016\003\000\002\016\004\000\002\016\003\000\002" +
    "\017\020\000\002\017\003\000\002\020\016\000\002\020" +
    "\017\000\002\021\004\000\002\022\004\000\002\022\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\016\003\014\004\013\026\015\030\007\031" +
    "\004\033\005\001\002\000\004\035\247\001\002\000\004" +
    "\035\202\001\002\000\004\002\201\001\002\000\004\035" +
    "\151\001\002\000\014\002\ufffb\026\ufffb\030\ufffb\031\ufffb" +
    "\033\ufffb\001\002\000\014\002\ufff7\026\ufff7\030\ufff7\031" +
    "\ufff7\033\ufff7\001\002\000\014\002\ufffd\026\ufffd\030\ufffd" +
    "\031\ufffd\033\ufffd\001\002\000\004\006\061\001\002\000" +
    "\004\002\uffd3\001\002\000\006\011\027\042\025\001\002" +
    "\000\014\002\uffff\026\015\030\007\031\004\033\005\001" +
    "\002\000\014\002\ufff9\026\ufff9\030\ufff9\031\ufff9\033\ufff9" +
    "\001\002\000\004\002\000\001\002\000\014\002\ufffe\026" +
    "\ufffe\030\ufffe\031\ufffe\033\ufffe\001\002\000\014\002\ufffc" +
    "\026\ufffc\030\ufffc\031\ufffc\033\ufffc\001\002\000\014\002" +
    "\ufff8\026\ufff8\030\ufff8\031\ufff8\033\ufff8\001\002\000\014" +
    "\002\ufffa\026\ufffa\030\ufffa\031\ufffa\033\ufffa\001\002\000" +
    "\010\010\uffe8\035\uffe8\041\uffe8\001\002\000\006\010\046" +
    "\035\047\001\002\000\004\035\030\001\002\000\004\042" +
    "\032\001\002\000\006\007\035\027\036\001\002\000\004" +
    "\007\033\001\002\000\004\042\034\001\002\000\016\007" +
    "\uffee\025\uffee\027\uffee\032\uffee\034\uffee\040\uffee\001\002" +
    "\000\004\042\045\001\002\000\004\042\037\001\002\000" +
    "\004\016\040\001\002\000\004\017\041\001\002\000\004" +
    "\042\042\001\002\000\004\017\043\001\002\000\004\025" +
    "\044\001\002\000\014\002\ufff5\026\ufff5\030\ufff5\031\ufff5" +
    "\033\ufff5\001\002\000\016\007\uffed\025\uffed\027\uffed\032" +
    "\uffed\034\uffed\040\uffed\001\002\000\004\042\060\001\002" +
    "\000\004\042\032\001\002\000\006\007\035\027\051\001" +
    "\002\000\004\042\052\001\002\000\004\016\053\001\002" +
    "\000\004\017\054\001\002\000\004\042\055\001\002\000" +
    "\004\017\056\001\002\000\004\025\057\001\002\000\014" +
    "\002\ufff6\026\ufff6\030\ufff6\031\ufff6\033\ufff6\001\002\000" +
    "\010\010\uffe7\035\uffe7\041\uffe7\001\002\000\004\015\062" +
    "\001\002\000\004\016\063\001\002\000\004\017\064\001" +
    "\002\000\004\042\065\001\002\000\004\017\066\001\002" +
    "\000\004\005\067\001\002\000\006\003\070\004\071\001" +
    "\002\000\006\003\uffcd\004\uffcd\001\002\000\010\012\100" +
    "\013\102\020\146\001\002\000\006\003\070\004\075\001" +
    "\002\000\006\003\uffd1\004\uffd1\001\002\000\006\003\uffcf" +
    "\004\uffcf\001\002\000\010\012\100\013\102\020\101\001" +
    "\002\000\006\003\uffd2\004\uffd2\001\002\000\006\003\uffd0" +
    "\004\uffd0\001\002\000\004\015\124\001\002\000\004\006" +
    "\122\001\002\000\004\015\103\001\002\000\004\016\104" +
    "\001\002\000\004\017\105\001\002\000\004\042\106\001" +
    "\002\000\004\017\107\001\002\000\004\005\110\001\002" +
    "\000\006\003\070\004\111\001\002\000\010\012\100\013" +
    "\102\020\117\001\002\000\006\003\070\004\113\001\002" +
    "\000\010\012\100\013\102\020\114\001\002\000\004\013" +
    "\115\001\002\000\004\005\116\001\002\000\006\003\uffcb" +
    "\004\uffcb\001\002\000\004\013\120\001\002\000\004\005" +
    "\121\001\002\000\006\003\uffcc\004\uffcc\001\002\000\004" +
    "\005\123\001\002\000\004\002\uffd4\001\002\000\004\016" +
    "\125\001\002\000\004\017\126\001\002\000\004\042\127" +
    "\001\002\000\004\017\130\001\002\000\004\014\131\001" +
    "\002\000\004\016\132\001\002\000\004\017\133\001\002" +
    "\000\004\020\135\001\002\000\006\020\144\021\143\001" +
    "\002\000\004\042\142\001\002\000\004\017\137\001\002" +
    "\000\004\020\140\001\002\000\004\005\141\001\002\000" +
    "\006\003\uffce\004\uffce\001\002\000\006\020\uffc9\021\uffc9" +
    "\001\002\000\004\017\uffca\001\002\000\004\042\145\001" +
    "\002\000\006\020\uffc8\021\uffc8\001\002\000\004\006\147" +
    "\001\002\000\004\005\150\001\002\000\004\002\uffd5\001" +
    "\002\000\004\042\032\001\002\000\010\007\035\034\154" +
    "\040\153\001\002\000\004\042\025\001\002\000\004\040" +
    "\155\001\002\000\006\017\160\042\157\001\002\000\006" +
    "\010\163\041\164\001\002\000\006\010\uffeb\041\uffeb\001" +
    "\002\000\004\042\161\001\002\000\004\017\162\001\002" +
    "\000\006\010\uffec\041\uffec\001\002\000\006\017\167\042" +
    "\166\001\002\000\004\025\165\001\002\000\014\002\ufff0" +
    "\026\ufff0\030\ufff0\031\ufff0\033\ufff0\001\002\000\006\010" +
    "\uffe9\041\uffe9\001\002\000\004\042\170\001\002\000\004" +
    "\017\171\001\002\000\006\010\uffea\041\uffea\001\002\000" +
    "\006\010\046\041\173\001\002\000\004\034\174\001\002" +
    "\000\004\040\175\001\002\000\006\017\160\042\157\001" +
    "\002\000\006\010\163\041\177\001\002\000\004\025\200" +
    "\001\002\000\014\002\uffef\026\uffef\030\uffef\031\uffef\033" +
    "\uffef\001\002\000\004\002\001\001\002\000\004\042\032" +
    "\001\002\000\010\007\035\025\204\027\205\001\002\000" +
    "\014\002\ufff4\026\ufff4\030\ufff4\031\ufff4\033\ufff4\001\002" +
    "\000\004\042\206\001\002\000\014\004\233\005\232\016" +
    "\234\022\235\023\236\001\002\000\006\025\210\036\211" +
    "\001\002\000\014\002\ufff3\026\ufff3\030\ufff3\031\ufff3\033" +
    "\ufff3\001\002\000\004\042\212\001\002\000\016\004\214" +
    "\005\213\016\215\022\217\023\220\024\216\001\002\000" +
    "\004\042\231\001\002\000\004\042\230\001\002\000\006" +
    "\017\225\042\224\001\002\000\004\042\223\001\002\000" +
    "\004\042\222\001\002\000\004\042\221\001\002\000\006" +
    "\025\uffdb\036\uffdb\001\002\000\006\025\uffdc\036\uffdc\001" +
    "\002\000\006\025\uffda\036\uffda\001\002\000\006\025\uffe0" +
    "\036\uffe0\001\002\000\004\042\226\001\002\000\004\017" +
    "\227\001\002\000\006\025\uffdf\036\uffdf\001\002\000\006" +
    "\025\uffde\036\uffde\001\002\000\006\025\uffdd\036\uffdd\001" +
    "\002\000\004\042\246\001\002\000\004\042\245\001\002" +
    "\000\006\017\242\042\241\001\002\000\004\042\240\001" +
    "\002\000\004\042\237\001\002\000\006\025\uffe1\036\uffe1" +
    "\001\002\000\006\025\uffe2\036\uffe2\001\002\000\006\025" +
    "\uffe6\036\uffe6\001\002\000\004\042\243\001\002\000\004" +
    "\017\244\001\002\000\006\025\uffe5\036\uffe5\001\002\000" +
    "\006\025\uffe4\036\uffe4\001\002\000\006\025\uffe3\036\uffe3" +
    "\001\002\000\004\042\032\001\002\000\006\007\035\032" +
    "\251\001\002\000\004\042\253\001\002\000\010\010\261" +
    "\025\262\027\263\001\002\000\004\016\254\001\002\000" +
    "\006\017\256\042\255\001\002\000\010\010\uffd9\025\uffd9" +
    "\027\uffd9\001\002\000\004\042\257\001\002\000\004\017" +
    "\260\001\002\000\010\010\uffd8\025\uffd8\027\uffd8\001\002" +
    "\000\004\042\266\001\002\000\014\002\ufff1\026\ufff1\030" +
    "\ufff1\031\ufff1\033\ufff1\001\002\000\004\042\206\001\002" +
    "\000\006\025\265\036\211\001\002\000\014\002\ufff2\026" +
    "\ufff2\030\ufff2\031\ufff2\033\ufff2\001\002\000\004\016\267" +
    "\001\002\000\006\017\271\042\270\001\002\000\010\010" +
    "\uffd7\025\uffd7\027\uffd7\001\002\000\004\042\272\001\002" +
    "\000\004\017\273\001\002\000\010\010\uffd6\025\uffd6\027" +
    "\uffd6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\020\002\017\003\005\004\015\005\007\006" +
    "\011\007\016\010\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\025\001\001\000\012\005" +
    "\021\006\020\007\023\010\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\071\017\072\020\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\075" +
    "\020\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\111\017\072\020\073\001" +
    "\001\000\002\001\001\000\006\017\075\020\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\135\022\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\151\001\001" +
    "\000\002\001\001\000\004\013\171\001\001\000\002\001" +
    "\001\000\004\012\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\247\001\001" +
    "\000\002\001\001\000\004\014\251\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\263\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        ArrayList<DefaultMutableTreeNode> nodos = new ArrayList<>();
        ArrayList<DefaultMutableTreeNode> nodosTemporales = new ArrayList<>();
       
        Principal principal;

        public void mandarMensaje(String mensaje){
            principal.agregarHistorial(mensaje);
        }

        public void llenarArbol(ArrayList<DefaultMutableTreeNode> nodo, DefaultMutableTreeNode nodoraiz){
            for (int i =0; i<nodo.size();i++){
               Nodo n = (Nodo) nodo.get(i).getUserObject();
                nodoraiz.add(nodo.get(i));
                }
             DefaultTreeModel modelo = new DefaultTreeModel(nodoraiz);
            principal.mostarArbol(modelo);
         //   principal.setVisible(true);
            principal.desactivarAbrirProyecto();
        }

        public parser(IDELexico idelex, Principal p){
            super(idelex);
            this.principal = p;
            
        }   
        public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"       "+mensaje);
        }
        public void syntax_error(Symbol s){
            setAccion("ERROR","Error Sintaxis columna: "+(s.right+1)+" Y Linea: "+(s.left+1),"");
            //JOptionPane.showMessageDialog(null,"Error Sintaxis columna: "+(s.right+1)+" Y Linea: "+(s.left+1),"Error",JOptionPane.ERROR_MESSAGE);
            principal.agregarHistorial("Error Sintaxis columna: "+(s.right+1)+" Y Linea: "+(s.left+1));
        }

        String var="";

        public void variable(String path){
            var = var + path;
        }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // pathCuerpo ::= pathCuerpo DIAGONAL IDNOMBRE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.variable("/"+i); 
               
               String j = (String) p;
               j = p+"/"+i;
               RESULT = j;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pathCuerpo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // pathCuerpo ::= DIAGONAL IDNOMBRE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.variable("/"+i);
    
                String valor = "/"+i;
                RESULT = valor;

 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pathCuerpo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // path ::= pathCuerpo EXTENSION_CSV 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.variable(".csv"); 

   String s = (String) p;
               s = p+".csv";
               RESULT = s;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expCarpeta ::= MENOR_QUE CARPETA NOMBRE IGUAL COMILLAS IDNOMBRE COMILLAS MAYOR_QUE expCuerpo MENOR_QUE DIAGONAL CARPETA MAYOR_QUE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 parser.setAccion("Comando para carpeta con mas cosas dentro","","");
                Nodo carper = new Nodo(c,null,false);
                DefaultMutableTreeNode carpeta = new DefaultMutableTreeNode(carper);
                if( p instanceof DefaultMutableTreeNode){
                    carpeta.add((DefaultMutableTreeNode)p);
                }else{
                    ArrayList<DefaultMutableTreeNode> la = (ArrayList) p;
                    for (int i=0; i<la.size(); i++){
                        carpeta.add(la.get(i));
                    }
                }
                
                RESULT = carpeta;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("expCarpeta",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expCarpeta ::= MENOR_QUE CARPETA NOMBRE IGUAL COMILLAS IDNOMBRE COMILLAS MAYOR_QUE MENOR_QUE DIAGONAL CARPETA MAYOR_QUE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 
parser.setAccion("Comando para carpeta vacia","","");

                Nodo carpeta = new Nodo(o,null,false);
                DefaultMutableTreeNode carpetas = new DefaultMutableTreeNode(carpeta);
                carpetas.add(new DefaultMutableTreeNode(""));
                RESULT = carpetas;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("expCarpeta",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expArchivo ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.syntax_error((Symbol) e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArchivo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expArchivo ::= MENOR_QUE ARCHIVO NOMBRE IGUAL COMILLAS IDNOMBRE COMILLAS UBICACION IGUAL COMILLAS path COMILLAS DIAGONAL MAYOR_QUE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 parser.setAccion("Comando para archivo con nombre: "+n+" Y path: "+p,"","");
                Nodo nodo = new Nodo(n,(String) p,true);
                DefaultMutableTreeNode archivo = new DefaultMutableTreeNode(nodo);
                RESULT = archivo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArchivo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expCuerpo ::= expCarpeta 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.setAccion("Solo Carpeta","",""); DefaultMutableTreeNode car = (DefaultMutableTreeNode) w; RESULT = car; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expCuerpo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expCuerpo ::= expCuerpo expCarpeta 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.setAccion("carpeta +","","");  DefaultMutableTreeNode lodelCuerpo = (DefaultMutableTreeNode) y; DefaultMutableTreeNode lodelaCarpeta = (DefaultMutableTreeNode) u; ArrayList<DefaultMutableTreeNode> hermanos = new ArrayList<>();hermanos.add(lodelCuerpo); hermanos.add(lodelaCarpeta);RESULT = hermanos; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expCuerpo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expCuerpo ::= expArchivo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.setAccion("Solo archivo","","");DefaultMutableTreeNode ss = (DefaultMutableTreeNode) a; RESULT = ss;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expCuerpo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expCuerpo ::= expCuerpo expArchivo 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.setAccion("Entrada archivo mas salto linea","","");

                    ArrayList<DefaultMutableTreeNode> hermanos = new ArrayList<>();

                    if(l instanceof DefaultMutableTreeNode){
                      DefaultMutableTreeNode cuerpo = (DefaultMutableTreeNode) l;
                      
                     hermanos.add(cuerpo); 
                    

}else{
                    ArrayList<DefaultMutableTreeNode> ui = (ArrayList) l;
                    for(int i=0; i<ui.size(); i++){
                            hermanos.add(ui.get(i));
                    }
}

                   if(s instanceof DefaultMutableTreeNode){
                      DefaultMutableTreeNode j = (DefaultMutableTreeNode) s;
                      
                     hermanos.add(j); 
                    

}else{
                    ArrayList<DefaultMutableTreeNode> usi = (ArrayList) s;
                    for(int i=0; i<usi.size(); i++){
                            hermanos.add(usi.get(i));
                    }
}


                     
                     RESULT = hermanos;
    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expCuerpo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // s ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.syntax_error((Symbol) e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // s ::= MENOR_QUE PROYECTO NOMBRE IGUAL COMILLAS IDNOMBRE COMILLAS MAYOR_QUE expCuerpo MENOR_QUE DIAGONAL PROYECTO MAYOR_QUE 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 parser.setAccion("Comando para Proyecto abierto y cerrado","",""); 

          Nodo simple = new Nodo(q,null,false);
        DefaultMutableTreeNode s = new DefaultMutableTreeNode(simple);

        if ( e instanceof DefaultMutableTreeNode){
        parser.nodos.add((DefaultMutableTreeNode)e);
       }else{  
            ArrayList<DefaultMutableTreeNode> ha = (ArrayList) e;
            for (int i=0; i<ha.size(); i++){
                parser.nodos.add(ha.get(i));
            }
       }
        parser.llenarArbol(parser.nodos,s);

         JOptionPane.showMessageDialog(null,"Proyecto analizado con exito","Info",JOptionPane.INFORMATION_MESSAGE);


              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // s ::= MENOR_QUE PROYECTO NOMBRE IGUAL COMILLAS IDNOMBRE COMILLAS MAYOR_QUE MENOR_QUE DIAGONAL PROYECTO MAYOR_QUE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 parser.setAccion("Comando para Proyecto abierto y cerrado sin cuerpo con nombre: "+p,"","");
        
          Nodo simple = new Nodo(p,null,false);
        DefaultMutableTreeNode s = new DefaultMutableTreeNode(simple);
        parser.llenarArbol(parser.nodos,s);
        JOptionPane.showMessageDialog(null,"Proyecto analizado con exito","Info",JOptionPane.INFORMATION_MESSAGE);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // condicionesSql ::= condicionesSql COMA IDNOMBRE IGUAL COMILLAS IDNOMBRE COMILLAS 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionesSql",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // condicionesSql ::= condicionesSql COMA IDNOMBRE IGUAL IDNOMBRE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionesSql",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // condicionesSql ::= IDNOMBRE IGUAL COMILLAS IDNOMBRE COMILLAS 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionesSql",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condicionesSql ::= IDNOMBRE IGUAL IDNOMBRE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionesSql",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // filtroSql ::= filtroSql AND IDNOMBRE DIFERENTE IDNOMBRE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("filtroSql",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // filtroSql ::= filtroSql AND IDNOMBRE MAYOR_IGUAL IDNOMBRE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("filtroSql",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // filtroSql ::= filtroSql AND IDNOMBRE MENOR_IGUAL IDNOMBRE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("filtroSql",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // filtroSql ::= filtroSql AND IDNOMBRE MAYOR_QUE IDNOMBRE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("filtroSql",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // filtroSql ::= filtroSql AND IDNOMBRE MENOR_QUE IDNOMBRE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("filtroSql",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // filtroSql ::= filtroSql AND IDNOMBRE IGUAL COMILLAS IDNOMBRE COMILLAS 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("filtroSql",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // filtroSql ::= filtroSql AND IDNOMBRE IGUAL IDNOMBRE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("filtroSql",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // filtroSql ::= IDNOMBRE MAYOR_IGUAL IDNOMBRE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("filtroSql",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // filtroSql ::= IDNOMBRE MENOR_IGUAL IDNOMBRE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("filtroSql",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // filtroSql ::= IDNOMBRE MAYOR_QUE IDNOMBRE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("filtroSql",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // filtroSql ::= IDNOMBRE MENOR_QUE IDNOMBRE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("filtroSql",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // filtroSql ::= IDNOMBRE IGUAL COMILLAS IDNOMBRE COMILLAS 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("filtroSql",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // filtroSql ::= IDNOMBRE IGUAL IDNOMBRE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("filtroSql",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // columnasSql ::= columnasSql COMA IDNOMBRE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("columnasSql",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // columnasSql ::= IDNOMBRE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("columnasSql",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valoresSql ::= valoresSql COMA IDNOMBRE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresSql",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // valoresSql ::= valoresSql COMA COMILLAS IDNOMBRE COMILLAS 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresSql",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // valoresSql ::= IDNOMBRE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresSql",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // valoresSql ::= COMILLAS IDNOMBRE COMILLAS 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresSql",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // pathSql ::= pathSql PUNTO IDNOMBRE 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.setAccion("pathSQL con vloar:"+(String)q+"."+s,"",""); String valor = (String) q + "."+s; RESULT = valor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pathSql",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // pathSql ::= IDNOMBRE PUNTO IDNOMBRE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.setAccion("pathSQL con valor:"+i+"."+n,"",""); String valor = i+"."+n; RESULT = valor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pathSql",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // insertarSql ::= INSERTAR EN pathSql PABIERTO columnasSql PCERRADO VALORES PABIERTO valoresSql PCERRADO PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		

                parser.mandarMensaje("Valores Insertados a la ruta: "+a);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insertarSql",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // insertarSql ::= INSERTAR EN pathSql VALORES PABIERTO valoresSql PCERRADO PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 parser.setAccion("Entro al sql Insertar con exito con path "+(String)a,"","");

            parser.mandarMensaje("Valores Insertados a la ruta: "+a); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insertarSql",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // actualizarSql ::= ACTUALIZAR EN pathSql ASIGNAR condicionesSql PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 parser.setAccion("Comando actualizar sin filtro","","");
                    parser.mandarMensaje("Valores actualizados correctamente");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizarSql",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // actualizarSql ::= ACTUALIZAR EN pathSql ASIGNAR condicionesSql FILTRAR filtroSql PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 parser.setAccion("Comando actualizar","","");
                    parser.mandarMensaje("Valores Actualizados correctamente");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizarSql",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // eliminarSql ::= ELIMINAR EN pathSql FILTRAR filtroSql PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 parser.setAccion("eliminar con filtro","","");
                    parser.mandarMensaje("Valores filtrados eliminados correctamente");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eliminarSql",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // eliminarSql ::= ELIMINAR EN pathSql PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.setAccion("eliminar simple","","");
                parser.mandarMensaje("Todos los valores eliminados correctamente");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("eliminarSql",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // seleccionarSql ::= SELECCIONAR POR EN pathSql FILTRAR IDNOMBRE IGUAL COMILLAS IDNOMBRE COMILLAS PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		 parser.setAccion("Comando seleccionar simple","","");
                     parser.mandarMensaje("Todos los campos filtrados correctamente");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccionarSql",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // seleccionarSql ::= SELECCIONAR columnasSql EN pathSql FILTRAR IDNOMBRE IGUAL COMILLAS IDNOMBRE COMILLAS PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		 parser.setAccion("Comando seleccionar con columnas","","");
                    parser.mandarMensaje("Valores filtrados correctamente");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccionarSql",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sql ::= eliminarSql 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sql ::= sql eliminarSql 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sql ::= actualizarSql 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sql ::= sql actualizarSql 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sql ::= seleccionarSql 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sql ::= sql seleccionarSql 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sql ::= insertarSql 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sql ::= sql insertarSql 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // l ::= sql 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // l ::= s 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= l EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

